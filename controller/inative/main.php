<?php

  ##########################################
  ##                                      ##
  ##  Created by Alex Anderson            ##
  ##  Date: 06/05/2015                    ##
  ##  Contact: alexandersonbm@hotmail.com ##
  ##                                      ##
  ##########################################

  namespace controller\inative;

  class main extends \controller\field{

    private $limit;

    public function __construct(){
      $this->db = new \controller\serviceDB($this);


    }

    public function setLimit($limit){
      if($limit){
        $this->limit = $limit;
      }else{
        $this->limit = "undefined";
      }

    }

    public function setFielda($campos) {

      # Group fields by type
      $fields = $this->separate($campos[0]);

      # Get the query based in filters
      $this->checkFields($fields);
      # If exists two type fields, check table
      $this->checkTable($campos[1]);
      # Check type of data
      $this->checkType();
}

    public function inative($date)
    {

      # Separate periods
       $temp = explode(',',$date);
      # Get periods
      $periodos = $this->getPeriod($temp[0],$temp[1]);
      # Main Field -> sum(valor_total) or sum(quantidade)
      $mainField = $this->field;
      # Limit min to consider inative
      $limit = $this->limit;
      # Selected item for analyzes
      $tableField = $this->tabla;
      # Conditions generated by function checkFields
      $querya = $this->getQuery();
      # Count vars
      $j = 0;
      $string = "''";

      $end = explode(",", $periodos[0])[1];


      $periodos = array_slice($periodos, 1);
      krsort($periodos);



      $this->db->setField("$mainField as total,$tableField,max(periodo) as periodo");
      $string = ["&"];
      $y = 0;
      $z = 0;
      foreach($periodos as $key=>$value)
      {

        $ini = date("Y-m-d", strtotime(explode(",", $value)[0]));
        $end = date("Y-m-d", strtotime(explode(",", $value)[1]));


        $stri = "'".implode("','",$string)."'";

        $q = $this->db->read("$querya periodo between '$ini' AND '$end' and $tableField not in ($stri) GROUP BY $tableField ORDER BY periodo DESC");

        $x = 0;
        foreach($q as $key2=>$value2)
        {

          # Total bought in current month
          $item[$y][$x][0] = round($value2['total'],2);
          # Client's name
          $item[$y][$x][1] = $value2[$tableField];
          # Total of the last buy.
          #$item[$mes][$x][2] = round($qa['total']);
          $item[$y][$x][2] = round($value2['total'],2);
          # Data of last buy
          $item[$y][$x][3] = date("d/m/Y",strtotime($value2['periodo']));
          ++$x;

          $string[$z] = $value2[$tableField];
          ++$z;

        }
        ++$y;
      }

      $stri = "'".implode("','",$string)."'";
       $q = $this->db->read("$querya periodo between '0000-00-00' AND '$ini' and $tableField not in ($stri)  GROUP BY $tableField ORDER BY periodo");
       $x = 0;
       foreach($q as $key=>$value)
       {
          # Total bought in current month
          $item[6][$x][0] = round($value2['total'],2);
          # Client's name
          $item[6][$x][1] = $value[$tableField];
          # Total of the last buy.
          #$item[$mes][$x][2] = round($qa['total']);
          $item[6][$x][2] = round($value['total'],2);
          # Data of last buy
          $item[6][$x][3] = date("d/m/Y",strtotime($value['periodo']));
          ++$x;
       }

      #$this->db->setField("$mainField as total,$tableField,max(N) as at,periodo");
    /*
        //Query values
      $q = $this->db->read("$querya periodo not between '0000-00-00' AND '$end' GROUP BY $tableField");
      $x = 0;
      # While
      foreach($q as $key=>$valor)
      {


        if($valor['total'] > $limit && $limit != "undefined"){
          continue;
        }
#        $this->db->setField("$mainField as total, concat(DIA,'-',MES,'-',ANO) as d");
        # Get total of the last buy.
 #       $qa = $this->db->read("$tableField = '{$valor[$tableField]}' AND N = '{$valor['at']}' AND $querya periodo
  #      GROUP BY N")[0];

        $mes = date("n",strtotime($valor['periodo']));
        $ano = date("y",strtotime($valor['periodo']));
        $x = isset($item[$ano][$mes]) ? count($item[$ano][$mes]) : 0 ;

        # Total bought in current month
        $item[$ano][$mes][$x][0] = round($valor['total'],2);
        # Client's name
        $item[$ano][$mes][$x][1] = $valor[$tableField];
        # Total of the last buy.
        #$item[$mes][$x][2] = round($qa['total']);
        $item[$ano][$mes][$x][2] = round($valor['total'],2);
        # Data of last buy
        $item[$ano][$mes][$x][3] = date("d/m/Y",strtotime($valor['periodo']));
        # Increase counter
        ++$x;

      }
     /* # Foreach
      foreach($periodos as $key=>$value){
        # Separate periods
        $temp = explode(',',$value);
        # Get first period
        $ini = date("Y-m-d",strtotime($temp[0]));
        # Get second period
        $end = date("Y-m-d",strtotime($temp[1]));
        # Get month name
        $mes = date("F-Y",strtotime($ini));





        # Initialize counter
        $x = 0;



      }*/


      return $item;
    }




    ########################################
    ##       Get and separe periods       ##
    ########################################

    public function getPeriod($data,$date2 = null){

      if($date2 != null){

        $firstDay = $data;
        $lastDay = $date2;
        $periodos[0] = "$data,$date2";
        $dataMax = strtotime($date2);
      }else{
        # Get first day of month
        $firstDay = date("j-n-Y",strtotime($data));
        # Get last day of month
        $lastDay  = date("t-n-Y",strtotime($data));
        # First period
        $periodos[0] = $firstDay.','.$lastDay;
        #Define the last date
        $dataMax = strtotime($lastDay);
      }

    $z = 1;

    $current=0;
    # Get first month
    $month = date("n",strtotime($data));
    # Get first year
    $year = date("Y", strtotime($data));
    # While the current date is less than max date, then continue
    while($current <= $dataMax){
      # Get next month
      $month = $month+1;
      # First date's period
      $p1 = "1-$month-$year"; //2014-02-01
      # Last day of date's period
      $p2D = date("t",strtotime($p1)); // 28
      # Get second date's period
      $p2 = "$p2D-$month-$year";
      #
      $limit1 = strtotime($p1);
      # Check if first date of this period is bigger than max date
      if( $limit1 >= $dataMax){
        break;
      }
      $periodos[$z] = "$p1,$p2";
      if($month >= 12)
      {
       $month = 0;
       $year = $year+1;
      }

      $current = strtotime($p2);
      if($current >= $dataMax)
      {
        $p2 = date("j-n-Y",$dataMax);
        $periodos[$z] = "$p1,$p2";
        break;
      }
      ++$z;

  }

  return $periodos;
  // $x = 0;

  //     # Get current month
  //     $mon = date("m",strtotime($data));
  //     # Get current year
  //     $year = date("Y",strtotime($data));
  //     # Get periods previous
  //     for($i=1;$i < 7;$i++){
  //       # Changes of year
  //       if($mon-1 == 0){$mon = 12;$year -= 1;}
  //       else{--$mon;}

  //       # Get first day of month
  //       $ini = "1-$mon-$year";
  //       # Get last day of month
  //       $end = date("t-n-Y",strtotime($ini));
  //       # Get Period
  //       $periodos[$i] = "$ini,$end";
  //     }
  //     # Set period
  //     $this->periodos = $periodos;
  //     # Return period
  //     return $periodos;
    }
  }


?>
